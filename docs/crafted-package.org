* Configuring a package manager

  The default package manager in @@texinfo:@emph{Crafted Emacs}@@ is
  the built-in ~package.el~.  Other package managers can be used with
  @@texinfo:@emph{Crafted Emacs}@@, their configuration is up to the
  user.  

  The general process for using a package manager in Emacs is to
  provide the configuration in the ~early-init.el~ file.  This file is
  used specifically to allow the user to configure various parts of
  Emacs very early in the startup process.

  To configure ~package.el~, add the following to your ~early-init.el~
  file.

  #+begin_src emacs-lisp
    ;; This assumes you have cloned the Crafted Emacs project in the
    ;; `crafted-emacs' directory in your home folder.  Change the path
    ;; appropriately for your system.
    (load "~/crafted-emacs/modules/crafted-early-init-config")
  #+end_src

  This code will do the following:

  + Setup the ~package-archives~ list to include the following list of
    package repositories:
    1. @@texinfo:@strong{GNU Elpa}@@ - contains packages which use the GNU GPL (GNU General
       Public License) for their license and for which the author has
       signed the copyright release to the Free Software Foundation.
       Maintenance is by the GNU Emacs maintainers.
    2. @@texinfo:@strong{Non-GNU Elpa}@@ - contains packages which may
       or may not use the GNU GPL for their license, but which the
       authors have not signed copyright release to the Free Software
       Foundation, however authors must follow a list of rules for
       package submission.  The decision to include a package is left
       to the discretion of the GNU Emacs maintainers.
    3. @@texinfo:@strong{MELPA Stable}@@ - MELPA packages which have a
       version tag in their ~git~ repository, these are pulled and
       built on a regular basis as needed when the tag version
       changes.
    4. @@texinfo:@strong{MELPA}@@ - hosts prebuilt development
       packages based on the latest commit in the respective ~git~
       repository.  These will have version numbers similar to this:
       ~20210701.839~ which is essentially a date stamp when the
       package was built.
  + Prioritize the list of package repositories to be in the order
    listed above.  This means, we prefer to get packages from GNU Elpa
    first, if not found, then try the next repository down the list,
    finally trying to get the package from MELPA as a last resort.
    This is because @@texinfo:@emph{Crafted Emacs}@@ prefers released
    versions, if available, for all packages installed.
  + Check to make sure the repository cache archives are up-to-date,
    and update if needed.  This check is performed when Emacs is
    starting, and will check to see if the repository cache is older
    than one day.  To check less frequently, set the variable
    ~crafted-package-update-days~ to a higher value.  To not perform
    the check at all, set the
    ~crafted-package-perform-stale-archive-check~ variable to ~nil~.

   Once @@texinfo:@emph{Crafted Emacs}@@ is up and running, no stale
    checks are made.  Thus, if you run @@texinfo:@emph{Crafted
    Emacs}@@ for several days without restarting Emacs, you'll need to
    refresh the package repository archive caches manually.  This is
    done automatically when running ~package-list-packages~.

* Installing packages

  The standard approach to finding and installing packages is to use
  the following command ~M-x list-packages RET~, which will bring up a
  user interface to search for packages, review the package details,
  install, update or remove package.  For more information, see the
  [[info:emacs#Packages][Emacs Packages Info page]].

  Additionally, @@texinfo:@emph{Crafted Emacs}@@ provides a few
  modules which bundle together packages for installation.  Each of
  these modules simply adds one or more package names to the
  ~package-selected-packages~ list, for example:

  #+begin_src emacs-lisp
    ;; not all package names are shown here, the list is shortened for
    ;; brevity.
    (add-to-list 'package-selected-packages 'cape)
    (add-to-list 'package-selected-packages 'consult)
    (add-to-list 'package-selected-packages 'corfu)
  #+end_src

  To use these modules, simply add a ~require~ in your ~init.el~
  file.  For example, to get the list above, you would add the
  following:

  #+begin_src emacs-lisp
    ;; Currently there are nine modules which provide packages, this is
    ;; just one of them.
    (require 'crafted-completion-packages)
  #+end_src

  somewhere near the top.  After this line, you then install the
  packages with the following:

  #+begin_src emacs-lisp
    ;; adding the `:noconfirm' flag will cause all the packages listed in
    ;; the `package-selected-packages' variable to be installed without
    ;; prompting you to confirm that choice.
    (package-install-selected-packages :noconfirm)
  #+end_src

  
* Using alternate package managers

  Not everyone will prefer to use Emacs' built-in package manager,
  ~package.el~.  Using the package bundle modules from
  @@texinfo:@emph{Crafted Emacs}@@ is still possible, however, you will
  potentially need to iterate over the ~package-selected-packages~
  list to perform the install for your package manager.  To help with
  that, the ~crafted-package-config~ module provides a variable to set
  and a function to call.

  Here is an example using ~straight-use-package~ as the tool to
  install packages:

  #+begin_src emacs-lisp
    (setq crafted-package-installer #'straight-use-package)
    (setq crafted-package-installed-predicate #'straight--installed-p)
    (crafted-package-install-package-list)
  #+end_src

  Note: This usage is simple in the sense full recipes are not used
  when using @@texinfo:@emph{Crafted Emacs}@@ package bundle modules.
  The above essentially runs code like the following:

  #+begin_src emacs-lisp
    (straight-use-package 'corfu)
  #+end_src

  It is not required to use the @@texinfo:@emph{Crafted Emacs}@@
  package bundle modules, you are free to install packages in whatever
  manner you choose, for example, using ~guix-home~ to install Emacs
  packages from the Guix Store.  Similarly, using ~straight~,
  ~elpaca~, ~package-vc~ or others can be used to install any packages
  you choose.  Once your packages are installed, you can then use the
  @@texinfo:@emph{Crafted Emacs}@@ configuration modules.  These
  modules have names like ~crafted-completion-config.el~ for example.
  Add these to your ~init.el~ @@texinfo:@strong{after}@@ installing
  packages. 


-----
# Local Variables:
# fill-column: 80
# eval: (auto-fill-mode 1)
# End:
